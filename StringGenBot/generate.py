from asyncio.exceptions import TimeoutError
from pyrogram import Client, filters
from telethon import TelegramClient
from telethon.sessions import StringSession
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import (
    ApiIdInvalid, PhoneNumberInvalid, PhoneCodeInvalid, PhoneCodeExpired, 
    SessionPasswordNeeded, PasswordHashInvalid,
)
from telethon.errors import (
    ApiIdInvalidError, PhoneNumberInvalidError, PhoneCodeInvalidError, 
    PhoneCodeExpiredError, SessionPasswordNeededError, PasswordHashInvalidError
)

# Start command for generating the session
@Client.on_message(filters.private & filters.command("generate"))
async def main(client, message):
    await message.reply(
        "Please choose the library to generate the session for:",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üßë‚Äçüíª Pyrogram", callback_data="pyrogram"),
                InlineKeyboardButton("Telethon üßë‚Äçüíª", callback_data="telethon"),
            ]
        ])
    )

# Handle the callback query for selecting Pyrogram or Telethon
@Client.on_callback_query()
async def callback_query_handler(client, callback_query):
    if callback_query.data == "pyrogram":
        await generate_session(client, callback_query.message, telethon=False)
    elif callback_query.data == "telethon":
        await generate_session(client, callback_query.message, telethon=True)

# Generate the session (Pyrogram or Telethon)
async def generate_session(bot, msg, telethon=False):
    session_type = "Telethon" if telethon else "Pyrogram"
    await msg.reply(f"Starting {session_type} session generation...")

    user_id = msg.chat.id

    # Get API_ID
    api_id_msg = await bot.ask(user_id, "Please send your `API_ID`", filters=filters.text)
    if await cancelled(api_id_msg):
        return
    try:
        api_id = int(api_id_msg.text)
    except ValueError:
        await msg.reply("Invalid API_ID. It must be an integer. Try again.", quote=True)
        return

    # Get API_HASH
    api_hash_msg = await bot.ask(user_id, "Please send your `API_HASH`", filters=filters.text)
    if await cancelled(api_id_msg):
        return
    api_hash = api_hash_msg.text

    # Get phone number
    phone_number_msg = await bot.ask(user_id, "Send your phone number with country code (e.g., `+19876543210`)", filters=filters.text)
    if await cancelled(api_id_msg):
        return
    phone_number = phone_number_msg.text

    await msg.reply("Sending OTP...")

    # Initialize client
    if telethon:
        client = TelegramClient(StringSession(), api_id, api_hash)
    else:
        client = Client(":memory:", api_id, api_hash)
    
    await client.connect()

    # Send code
    try:
        if telethon:
            await client.send_code_request(phone_number)
        else:
            await client.send_code(phone_number)
    except (ApiIdInvalid, ApiIdInvalidError):
        await msg.reply("Invalid API_ID or API_HASH. Please try again.")
        return
    except (PhoneNumberInvalid, PhoneNumberInvalidError):
        await msg.reply("Invalid phone number. Please try again.")
        return

    # Get OTP from the user
    try:
        otp_msg = await bot.ask(user_id, "Please enter the OTP received (format: `1 2 3 4 5`)", filters=filters.text, timeout=600)
        if await cancelled(api_id_msg):
            return
    except TimeoutError:
        await msg.reply("Time limit exceeded. Please start again.")
        return

    otp = otp_msg.text.replace(" ", "")

    # Try signing in
    try:
        if telethon:
            await client.sign_in(phone_number, otp)
        else:
            await client.sign_in(phone_number, otp)
    except (PhoneCodeInvalid, PhoneCodeInvalidError):
        await msg.reply("Invalid OTP. Please try again.")
        return
    except (PhoneCodeExpired, PhoneCodeExpiredError):
        await msg.reply("OTP expired. Please try again.")
        return
    except (SessionPasswordNeeded, SessionPasswordNeededError):
        # Handle two-step verification password
        password_msg = await bot.ask(user_id, "Your account is protected by two-step verification. Please provide the password.", filters=filters.text, timeout=300)
        if await cancelled(api_id_msg):
            return
        try:
            password = password_msg.text
            if telethon:
                await client.sign_in(password=password)
            else:
                await client.check_password(password=password)
        except (PasswordHashInvalid, PasswordHashInvalidError):
            await msg.reply("Invalid password. Please try again.")
            return

    # Generate and send session string
    if telethon:
        string_session = client.session.save()
    else:
        string_session = await client.export_session_string()

    session_text = f"**{session_type} string session**\n\n`{string_session}`\n\nGenerated by @YourBotName"
    await client.send_message("me", session_text)
    await msg.reply(f"Successfully generated {session_type} string session. Check your saved messages.")

    await client.disconnect()

# Function to check if the user has cancelled
async def cancelled(msg):
    if msg.text.lower() in ["/cancel", "/restart"]:
        await msg.reply("Session generation cancelled.", quote=True)
        return True
    return False
